package ru.job4j.algo.twopoint;

public class Defragmentation {

    /**
     * Метод для сжатия массива путем перемещения всех ненулевых элементов в начало
     * Использует вложенные циклы для поиска и замены нулевых элементов
     * @param array - исходный массив для обработки
     * @return обработанный массив с ненулевыми элементами в начале
     */
    public static int[] compress(int[] array) {
        /*
         * Проходим по всем элементам массива
         */
        for (int i = 0; i < array.length; i++) {
            /*
             * Если текущий элемент равен нулю
             */
            if (array[i] == 0) {
                /*
                 * Ищем первый ненулевой элемент справа от текущего
                 */
                for (int j = i + 1; j < array.length; j++) {
                    /*
                     * Если нашли ненулевой элемент
                     */
                    if (array[j] != 0) {
                        /*
                         * Заменяем нулевой элемент на найденный ненулевой
                         */
                        array[i] = array[j];
                        /*
                         * Обнуляем элемент, который перенесли
                         */
                        array[j] = 0;
                        /*
                         * Прерываем внутренний цикл после первой замены
                         */
                        break;
                    }
                }
            }
        }
        /*
         * Возвращаем измененный массив
         */
        return array;
    }

    /**
     * Оптимизированная версия метода сжатия с использованием двух указателей
     * Более эффективный алгоритм с линейной сложностью O(n)
     * @param array - исходный массив для обработки
     * @return обработанный массив с ненулевыми элементами в начале
     */
    public static int[] compress2Point(int[] array) {
        /*
         * Указатель для записи ненулевых элементов
         */
        int i = 0;
        /*
         * Указатель для чтения элементов массива
         */
        int j = 0;

        /*
         * Проходим по всем элементам массива
         */
        while (j < array.length) {
            /*
             * Если на позиции i - ноль, а на позиции j - не ноль
             */
            if (array[i] == 0 && array[j] != 0) {
                /*
                 * Переносим ненулевой элемент на позицию i
                 */
                array[i] = array[j];
                /*
                 * Обнуляем элемент на позиции j
                 */
                array[j] = 0;
            }

            /*
             * Если текущий элемент на позиции i не нулевой
             */
            if (array[i] != 0) {
                /*
                 * Перемещаем указатель записи на следующую позицию
                 */
                i++;
            }

            /*
             * Всегда перемещаем указатель чтения вперед
             */
            j++;
        }

        /*
         * Возвращаем измененный массив
         */
        return array;
    }
}